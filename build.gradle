buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

println("Local debug: ${local_debug.toBoolean()}")

version = "${haruhicore_version}-${getBuildNumber()}"
group = 'com.haruhifanclub.mods'
archivesBaseName = "haruhimod-${minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
    runs {
        client {
            workingDirectory project.file('run').canonicalPath
            property 'log4j.configurationFile', 'log4j2.xml'
            mods {
                haruhicore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run').canonicalPath
            property 'log4j.configurationFile', 'log4j2.xml'
            mods {
                haruhicore {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        url "https://maven.blamejared.com"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://maven.pkg.github.com/wakelesssloth56/ahutils-mod"
        credentials {
            username = System.getenv("GITHUB_ACTOR") ? System.getenv("GITHUB_ACTOR") : System.getenv("GITHUB_USERNAME")
            password = System.getenv("GITHUB_TOKEN")
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    if (local_debug.toBoolean()){
        compileOnly fileTree(dir: 'libs', include: ['*-forgelib.jar', '*-api.jar'])
        runtimeOnly fileTree(dir: 'libs', exclude: ['*-forgelib.jar', '*-deobf.jar', '*-sources.jar', '*-api.jar'])
    } else {
        compileOnly "org.auioc.mods.ahutils:ahutils-${minecraft_version}:${ahutils_version}:forgelib"
        runtimeOnly "org.auioc.mods.ahutils:ahutils-${minecraft_version}:${ahutils_version}"
    }

    // runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
    // runtimeOnly fg.deobf("net.darkhax.openloader:OpenLoader-${minecraft_version}:${openloader_version}")
    // runtimeOnly fg.deobf("curse.maven:jade-324717:3439522")
}

processResources {
    // from (sourceSets.main.resources.srcDirs) {
    //     include 'META-INF/mods.toml'
    //     duplicatesStrategy 'include'
    //     expand 'haruhicore_version': "${minecraft_version}-${haruhicore_version}-${getBuildNumber()}", 'ahutils_version': "${ahutils_version}"
    // }
}

jar {}

jar.finalizedBy('reobfJar')

publishing {}

def getBuildNumber() {
    def ci_version = System.getenv("CI_VERSION")
    if (ci_version != null) {
        return ci_version
    }
    return "unknown"
}
