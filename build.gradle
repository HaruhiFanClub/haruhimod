buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath "org.ajoberstar.grgit:grgit-gradle:4.1.0"
    }
}
apply plugin: 'net.minecraftforge.gradle'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "org.ajoberstar.grgit"

version = "${minecraft_version}-${mod_version}+${getBuildNumber()}"
group = 'org.auioc.mods.haruhimod'
archivesBaseName = 'haruhimod'

java.toolchain.languageVersion = JavaLanguageVersion.of(15)
// sourceCompatibility = JavaVersion.VERSION_15
// targetCompatibility = JavaVersion.VERSION_15
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                haruhimod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                haruhimod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'haruhicore', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                haruhimod {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {
    from (sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'haruhicore_version': "${minecraft_version}-${haruhicore_version}", 'addrlimiter_version': "${minecraft_version}-${addrlimiter_version}", 'ahutils_version': "${minecraft_version}-${ahutils_version}"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

jar {
    // manifest {
    //     attributes([
    //         "Specification-Title": "haruhicore",
    //         "Specification-Vendor": "haruhifunclub",
    //         "Specification-Version": "${version}",
    //         "Implementation-Title": project.name,
    //         "Implementation-Version": "${version}",
    //         "Implementation-Vendor" :"haruhifunclub",
    //         "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    //     ])
    // }
}

jar.finalizedBy('reobfJar') 

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
}

def getBuildNumber() {
    def build_id = System.getenv("GITHUB_RUN_NUMBER")

    // CI builds only
    if (build_id != null) {
        return "build.${build_id}"
    }

    if (grgit != null) {
        def head = grgit.head()
        def id = head.abbreviatedId

        // Flag the build if the build tree is not clean
        if (!grgit.status().clean) {
            id += "-dirty"
        }

        return "rev.${id}"
    }

    // No tracking information could be found about the build
    return "unknown"
}
